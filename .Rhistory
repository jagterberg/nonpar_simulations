if(!require(nonparGraphTesting)) {
install.packages("nonparGraphTesting_0.1.0.tar.gz", repos = NULL, type="source")
library(nonparGraphTesting)
}
if (!require(irlba)) {
install.packages("irlba")
library(irlba)
}
if(!require(igraph)) {
install.packages("igraph")
library(igraph)
}
if(!require(Rcpp)) {
install.packages("Rcpp")
library(Rcpp)
}
Rcpp::cppFunction("
NumericMatrix generateAdjacencyMatrix(NumericMatrix pMatrix) {
int n = pMatrix.cols();
NumericMatrix A(n,n);
for(int i = 0; i < n; i ++) {
for (int j = i + 1; j < n; j++) {
A(i,j) = (int)(rand()%100 < (pMatrix(i,j)* 100));
A(j,i) = A(i,j);
}
}
return A;
}
")
set.seed(1234)
MCs <- 50
epsilons <- c(.15,.2,.35)
epsilons <- c(.15,.2,.35)
ns <- c(100,200,500)#,1000)
vals <- list()
i <- 1
Q1 <- diag(1,3)
Q2 <- diag(-1,3)
Q3 <- diag(c(1,-1,-1),3)
Q4 <- diag(c(-1,1,1),3)
Q5 <- diag(c(-1,-1,1),3)
Q6 <- diag(c(-1,1,-1),3)
Q7 <- diag(c(1,1,-1),3)
Q8 <- diag(c(1,-1,1),3)
signs <- list(Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q8)
epsilons <- c(0,.15,.2,.35)
epsilons <- c(0)#,.15,.2,.35)
ns <- c(100,200,500)#,1000)
vals <- list()
Q1 <- diag(1,3)
Q2 <- diag(-1,3)
Q3 <- diag(c(1,-1,-1),3)
i <- 1
Q4 <- diag(c(-1,1,1),3)
Q5 <- diag(c(-1,-1,1),3)
Q6 <- diag(c(-1,1,-1),3)
Q7 <- diag(c(1,1,-1),3)
Q8 <- diag(c(1,-1,1),3)
signs <- list(Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q8)
for (eps in epsilons) {
vals[[i]] <- list()
print(paste0("epsilon = ",eps))
B <- matrix(c(.3,.8,.8,.8,.3,.8,.8,.8,.3),3,3)
B2 <- B + diag(eps,3)
nus <- eigen(B)
nus_true1 <- nus$vectors %*% diag(abs(nus$values)^(1/2),3,3)
nus <- eigen(B2)
nus_true2 <- nus$vectors %*% diag(abs(nus$values)^(1/2),3,3)
Ipq <- diag(c(1,-1,-1),3,3)
pis <- c(.35,.35,.3)
j <- 1
for (n in ns) {
print(paste0("n = ",n))
vals[[i]][[j]] <- 0
for (mc in c(1:MCs)) {
print(paste0("Run: ",mc," out of ", MCs, " for n = ",n, ", eps = ",eps))#Matching datasets")
m <- n
assignmentvector1 <- rmultinom(n,1,pis)
assignmentvector2 <- rmultinom(m,1,pis)
Xtrue <- t(assignmentvector1) %*% nus_true1
Ytrue <- t(assignmentvector2) %*% nus_true2
P1 <- Xtrue %*%Ipq %*% t(Xtrue)
P2 <- Ytrue %*% Ipq %*% t(Ytrue)
A <- generateAdjacencyMatrix(P1)
C <- generateAdjacencyMatrix(P2)
Xhat <- irlba(A,3)
Xhat <- Xhat$u %*% diag(Xhat$d)^(1/2)
#Xhat <- Xhat$vectors[,c(1,n-1,n)] %*% diag(abs(Xhat$values[c(1,n-1,n)])^(1/2))
Yhat <- irlba(C,3)
Yhat <- Yhat$u %*% diag(Yhat$d)^(1/2)
#Yhat <- Yhat$vectors[,c(1,n-1,n)] %*% diag(abs(Yhat$values[c(1,n-1,n)])^(1/2))
get_matched <- list()
for (l in c(1:length(signs))) {
get_matched[[l]] <- match_support(Xhat,Yhat
,lambda_init = .2
,alpha = .2
, Q = signs[[l]],numReps = 50)
}
cs <- sapply(get_matched,`[[`,3)
Q <-  get_matched[[which.min(cs)]]$Q
Xnew <- Xhat %*% Q
vals[[i]][[j]] <-  nonpar.test(Xnew,Yhat,1000) + vals[[i]][[j]]
}
#vals[[i]][[j]] <- vals[[i]][[j]]#/MCs
j <- j + 1
}
names(vals[[i]]) <- ns
i <- i + 1
}
mc
n
B
B2
m <- n
assignmentvector1 <- rmultinom(n,1,pis)
assignmentvector2 <- rmultinom(m,1,pis)
Xtrue <- t(assignmentvector1) %*% nus_true1
Ytrue <- t(assignmentvector2) %*% nus_true2
P1 <- Xtrue %*%Ipq %*% t(Xtrue)
P2 <- Ytrue %*% Ipq %*% t(Ytrue)
A <- generateAdjacencyMatrix(P1)
C <- generateAdjacencyMatrix(P2)
Xhat <- irlba(A,3)
Xhat <- Xhat$u %*% diag(Xhat$d)^(1/2)
Yhat <- irlba(C,3)
Yhat <- Yhat$u %*% diag(Yhat$d)^(1/2)
get_matched <- list()
for (l in c(1:length(signs))) {
get_matched[[l]] <- match_support(Xhat,Yhat
,lambda_init = .2
,alpha = .2
, Q = signs[[l]],numReps = 50)
}
for (l in c(1:length(signs))) {
get_matched[[l]] <- match_support(Xhat,Yhat
,lambda_init = .2
,alpha = .2
, Q = signs[[l]],numReps = 0)
}
cs <- sapply(get_matched,`[[`,3)
Q <-  get_matched[[which.min(cs)]]$Q
Xnew <- Xhat %*% Q
vals[[i]][[j]] <-  nonpar.test(Xnew,Yhat,1000) + vals[[i]][[j]]
nonpar.test(Xnew,Yhat,1000)
vals
i
j
vals[[i]][[j]]
nonpar.test(Xnew,Yhat,1000)
nonpar.test(Xnew,Yhat,1000) + vals[[i]][[j]]
class(vals[[i]][[j]])
test <- nonpar.test(Xnew,Yhat,1000)
test$permutation_results
sum(test$permutation_results)/1000
nonpar.test()
nonpar.test
library(nonparGraphTesting)
nonpar.test
run_perm_test
test$permutation_results
eps <- .3
B <- matrix(c(.3,.8,.8,.8,.3,.8,.8,.8,.3),3,3)
B2 <- B + diag(eps,3)
nus <- eigen(B)
nus_true1 <- nus$vectors %*% diag(abs(nus$values)^(1/2),3,3)
nus <- eigen(B2)
nus_true2 <- nus$vectors %*% diag(abs(nus$values)^(1/2),3,3)
Ipq <- diag(c(1,-1,-1),3,3)
pis <- c(.35,.35,.3)
j <- 1
vals[[i]][[j]] <- 0
print(paste0("Run: ",mc," out of ", MCs, " for n = ",n, ", eps = ",eps))#Matching datasets")
m <- n
assignmentvector1 <- rmultinom(n,1,pis)
assignmentvector2 <- rmultinom(m,1,pis)
Xtrue <- t(assignmentvector1) %*% nus_true1
Ytrue <- t(assignmentvector2) %*% nus_true2
P1 <- Xtrue %*%Ipq %*% t(Xtrue)
P2 <- Ytrue %*% Ipq %*% t(Ytrue)
A <- generateAdjacencyMatrix(P1)
C <- generateAdjacencyMatrix(P2)
Xhat <- irlba(A,3)
Xhat <- Xhat$u %*% diag(Xhat$d)^(1/2)
Yhat <- irlba(C,3)
Yhat <- Yhat$u %*% diag(Yhat$d)^(1/2)
get_matched <- list()
for (l in c(1:length(signs))) {
get_matched[[l]] <- match_support(Xhat,Yhat
,lambda_init = .2
,alpha = .2
, Q = signs[[l]],numReps = 0)
}
cs <- sapply(get_matched,`[[`,3)
Q <-  get_matched[[which.min(cs)]]$Q
Xnew <- Xhat %*% Q
test <- nonpar.test(Xnew,Yhat,1000)
sum(test$permutation_results)
B2
B
n <- 500
vals[[i]] <- list()
print(paste0("epsilon = ",eps))
B <- matrix(c(.3,.8,.8,.8,.3,.8,.8,.8,.3),3,3)
B2 <- B + diag(eps,3)
nus <- eigen(B)
nus_true1 <- nus$vectors %*% diag(abs(nus$values)^(1/2),3,3)
nus <- eigen(B2)
nus_true2 <- nus$vectors %*% diag(abs(nus$values)^(1/2),3,3)
Ipq <- diag(c(1,-1,-1),3,3)
pis <- c(.35,.35,.3)
j <- 1
vals[[i]][[j]] <- 0
print(paste0("Run: ",mc," out of ", MCs, " for n = ",n, ", eps = ",eps))#Matching datasets")
m <- n
assignmentvector1 <- rmultinom(n,1,pis)
assignmentvector2 <- rmultinom(m,1,pis)
Xtrue <- t(assignmentvector1) %*% nus_true1
Ytrue <- t(assignmentvector2) %*% nus_true2
P1 <- Xtrue %*%Ipq %*% t(Xtrue)
P2 <- Ytrue %*% Ipq %*% t(Ytrue)
A <- generateAdjacencyMatrix(P1)
C <- generateAdjacencyMatrix(P2)
Xhat <- irlba(A,3)
Xhat <- Xhat$u %*% diag(Xhat$d)^(1/2)
Yhat <- irlba(C,3)
Yhat <- Yhat$u %*% diag(Yhat$d)^(1/2)
get_matched <- list()
for (l in c(1:length(signs))) {
get_matched[[l]] <- match_support(Xhat,Yhat
,lambda_init = .2
,alpha = .2
, Q = signs[[l]],numReps = 0)
}
cs <- sapply(get_matched,`[[`,3)
Q <-  get_matched[[which.min(cs)]]$Q
Xnew <- Xhat %*% Q
test <- nonpar.test(Xnew,Yhat,1000)
sum(test$permutation_results)
n <- 250
m <- n
assignmentvector1 <- rmultinom(n,1,pis)
assignmentvector2 <- rmultinom(m,1,pis)
Xtrue <- t(assignmentvector1) %*% nus_true1
Ytrue <- t(assignmentvector2) %*% nus_true2
P1 <- Xtrue %*%Ipq %*% t(Xtrue)
P2 <- Ytrue %*% Ipq %*% t(Ytrue)
A <- generateAdjacencyMatrix(P1)
C <- generateAdjacencyMatrix(P2)
Xhat <- irlba(A,3)
Xhat <- Xhat$u %*% diag(Xhat$d)^(1/2)
Yhat <- irlba(C,3)
Yhat <- Yhat$u %*% diag(Yhat$d)^(1/2)
get_matched <- list()
for (l in c(1:length(signs))) {
get_matched[[l]] <- match_support(Xhat,Yhat
,lambda_init = .2
,alpha = .2
, Q = signs[[l]],numReps = 0)
}
cs <- sapply(get_matched,`[[`,3)
Q <-  get_matched[[which.min(cs)]]$Q
Xnew <- Xhat %*% Q
test <- nonpar.test(Xnew,Yhat,1000)
test$permutation_results
sum(test$permutation_results)
eps <- .2
print(paste0("epsilon = ",eps))
B <- matrix(c(.3,.8,.8,.8,.3,.8,.8,.8,.3),3,3)
B2 <- B + diag(eps,3)
nus <- eigen(B)
nus_true1 <- nus$vectors %*% diag(abs(nus$values)^(1/2),3,3)
nus <- eigen(B2)
nus_true2 <- nus$vectors %*% diag(abs(nus$values)^(1/2),3,3)
Ipq <- diag(c(1,-1,-1),3,3)
pis <- c(.35,.35,.3)
j <- 1
print(paste0("Run: ",mc," out of ", MCs, " for n = ",n, ", eps = ",eps))#Matching datasets")
m <- n
assignmentvector1 <- rmultinom(n,1,pis)
Xtrue <- t(assignmentvector1) %*% nus_true1
assignmentvector2 <- rmultinom(m,1,pis)
Ytrue <- t(assignmentvector2) %*% nus_true2
P1 <- Xtrue %*%Ipq %*% t(Xtrue)
P2 <- Ytrue %*% Ipq %*% t(Ytrue)
A <- generateAdjacencyMatrix(P1)
C <- generateAdjacencyMatrix(P2)
Xhat <- irlba(A,3)
Xhat <- Xhat$u %*% diag(Xhat$d)^(1/2)
Yhat <- irlba(C,3)
Yhat <- Yhat$u %*% diag(Yhat$d)^(1/2)
get_matched <- list()
for (l in c(1:length(signs))) {
get_matched[[l]] <- match_support(Xhat,Yhat
,lambda_init = .2
,alpha = .2
, Q = signs[[l]],numReps = 0)
}
cs <- sapply(get_matched,`[[`,3)
Q <-  get_matched[[which.min(cs)]]$Q
Xnew <- Xhat %*% Q
test <- nonpar.test(Xnew,Yhat,1000)
sum(test$permutation_results)
sum(test$permutation_results)/1000
n
eps
eps <- .25
B <- matrix(c(.3,.8,.8,.8,.3,.8,.8,.8,.3),3,3)
B2 <- B + diag(eps,3)
nus <- eigen(B)
nus_true1 <- nus$vectors %*% diag(abs(nus$values)^(1/2),3,3)
nus <- eigen(B2)
nus_true2 <- nus$vectors %*% diag(abs(nus$values)^(1/2),3,3)
Ipq <- diag(c(1,-1,-1),3,3)
pis <- c(.35,.35,.3)
j <- 1
print(paste0("Run: ",mc," out of ", MCs, " for n = ",n, ", eps = ",eps))#Matching datasets")
m <- n
assignmentvector1 <- rmultinom(n,1,pis)
assignmentvector2 <- rmultinom(m,1,pis)
Xtrue <- t(assignmentvector1) %*% nus_true1
Ytrue <- t(assignmentvector2) %*% nus_true2
P1 <- Xtrue %*%Ipq %*% t(Xtrue)
P2 <- Ytrue %*% Ipq %*% t(Ytrue)
A <- generateAdjacencyMatrix(P1)
C <- generateAdjacencyMatrix(P2)
Xhat <- irlba(A,3)
Xhat <- Xhat$u %*% diag(Xhat$d)^(1/2)
Yhat <- irlba(C,3)
Yhat <- Yhat$u %*% diag(Yhat$d)^(1/2)
get_matched <- list()
for (l in c(1:length(signs))) {
get_matched[[l]] <- match_support(Xhat,Yhat
,lambda_init = .2
,alpha = .2
, Q = signs[[l]],numReps = 0)
}
cs <- sapply(get_matched,`[[`,3)
Q <-  get_matched[[which.min(cs)]]$Q
Xnew <- Xhat %*% Q
test <- nonpar.test(Xnew,Yhat,1000)
sum(test$permutation_results)
assignmentvector1 <- rmultinom(n,1,pis)
assignmentvector2 <- rmultinom(m,1,pis)
Xtrue <- t(assignmentvector1) %*% nus_true1
Ytrue <- t(assignmentvector2) %*% nus_true2
P1 <- Xtrue %*%Ipq %*% t(Xtrue)
P2 <- Ytrue %*% Ipq %*% t(Ytrue)
A <- generateAdjacencyMatrix(P1)
C <- generateAdjacencyMatrix(P2)
Xhat <- irlba(A,3)
Xhat <- Xhat$u %*% diag(Xhat$d)^(1/2)
Yhat <- irlba(C,3)
Yhat <- Yhat$u %*% diag(Yhat$d)^(1/2)
get_matched <- list()
for (l in c(1:length(signs))) {
get_matched[[l]] <- match_support(Xhat,Yhat
,lambda_init = .2
,alpha = .2
, Q = signs[[l]],numReps = 0)
}
cs <- sapply(get_matched,`[[`,3)
Q <-  get_matched[[which.min(cs)]]$Q
Xnew <- Xhat %*% Q
test <- nonpar.test(Xnew,Yhat,1000)
sum(test$permutation_results)
n <- 300
m <- n
assignmentvector1 <- rmultinom(n,1,pis)
assignmentvector2 <- rmultinom(m,1,pis)
Xtrue <- t(assignmentvector1) %*% nus_true1
Ytrue <- t(assignmentvector2) %*% nus_true2
P1 <- Xtrue %*%Ipq %*% t(Xtrue)
P2 <- Ytrue %*% Ipq %*% t(Ytrue)
A <- generateAdjacencyMatrix(P1)
C <- generateAdjacencyMatrix(P2)
Xhat <- irlba(A,3)
Xhat <- Xhat$u %*% diag(Xhat$d)^(1/2)
Yhat <- irlba(C,3)
Yhat <- Yhat$u %*% diag(Yhat$d)^(1/2)
get_matched <- list()
for (l in c(1:length(signs))) {
get_matched[[l]] <- match_support(Xhat,Yhat
,lambda_init = .2
,alpha = .2
, Q = signs[[l]],numReps = 0)
}
cs <- sapply(get_matched,`[[`,3)
Q <-  get_matched[[which.min(cs)]]$Q
Xnew <- Xhat %*% Q
test <- nonpar.test(Xnew,Yhat,1000)
sum(test$permutation_results)
n
if(!require(nonparGraphTesting)) {
install.packages("nonparGraphTesting_0.1.0.tar.gz", repos = NULL, type="source")
library(nonparGraphTesting)
}
if (!require(irlba)) {
install.packages("irlba")
library(irlba)
}
if(!require(igraph)) {
install.packages("igraph")
library(igraph)
}
if(!require(Rcpp)) {
install.packages("Rcpp")
library(Rcpp)
}
Rcpp::cppFunction("
NumericMatrix generateAdjacencyMatrix(NumericMatrix pMatrix) {
int n = pMatrix.cols();
NumericMatrix A(n,n);
for(int i = 0; i < n; i ++) {
for (int j = i + 1; j < n; j++) {
A(i,j) = (int)(rand()%100 < (pMatrix(i,j)* 100));
A(j,i) = A(i,j);
}
}
return A;
}
")
set.seed(1111)
MCs <- 50
epsilons <- c(0,.05,.1,.15,.2,.25,.3)
load("C:/Users/joshu/Dropbox/Documents/Research/grdpg_nonpar/nonpar_sims/MC_results.Rdata")
MCs <- 50
epsilons <- c(0,.05,.1,.15,.2,.25,.3)
ns <- c(100,200,300,400,500)#,1000)
results <- matrix(0,length(epsilons),length(ns))
colnames(results) <- ns
rownames(results) <- epsilons
results2 <- t(results)
vals[[1]]
vals[[1]][[1]]
vals[[2]][[1]]
vals[[2]][[4]]
vals[[5]][[4]]
vals[[7]][[4]]
vals[[7]][[3]]
vals[[7]][[2]]
vals[[6]][[2]]
vals[[6]][[3]]
